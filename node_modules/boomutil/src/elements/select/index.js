import { els } from "../../util/general";

export default class BoomSelect extends HTMLElement {
	constructor() {
		super();
		this.handler = () => {};
		this.array = {};
	}
	
	connectedCallback() {
		this.mode = this.getAttribute("mode") || "single";
	}
	
	attributeChangedCallback(key, oldValue, newValue) {
		if(key == "mode") {
			this.mode = newValue;
		}
	}
	
	load(options) {
		this.array = options;
		this.innerHTML = ((html = "") => {
			for(const tag of options) {
				html += `<boom-item class="tag"
					tabindex="0"
					title="${tag.title}" `;
				if("gicon" in tag) html += `gicon="${tag.gicon}"`;
				html += `></boom-item>`;
			}
			return html;
		})();
		this.updateClickListeners();
	}
	
	select(id, item) {
		this.handler(id, item, this.array);
		if(this.mode == "single") {
			this.reset();
			if(item) {
				item.classList.add("active");
			} else {
				els(this, "boom-item")[id].classList.add("active");
			}
		}
	}
	
	updateClickListeners() {
		els(this, "boom-item").forEach((item, id) => {
			item.classList.remove('active');
			if(this.mode == "single" && id == 0) {
				this.reset();
				item.classList.add('active');
			}
			item.onclick = () => this.select(id, item);
		});
	}
	
	reset() {
		for(const item of els(this, 'boom-item')) {
			item.classList.remove('active');
		}
	}
	
	set mode(mode) {
		this.modeValue = mode;
		this.updateClickListeners();
	}
	
	get mode() {
		return this.modeValue;
	}
	
	set onselect(fun) {
		this.handler = fun;
	}
}



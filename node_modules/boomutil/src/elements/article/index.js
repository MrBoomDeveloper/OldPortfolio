export default class BoomArticle extends HTMLElement {
	connectedCallback(html = "<div>") {
<<<<<<< HEAD
		this.innerHTML = html + "</div>";
	}
}

export default class BoomArticle extends HTMLElement {
	connectedCallback() {
		const { banner, title, loading, highlight, tags } = this.attributes;
		this.innerHTML = ((html = "<div>") => {
			if(banner) {
				html += `<div class="banner">
					<img src="${banner}"
						alt="${title}" title="${title}"
						loading="${loading || auto}">
				</div>`;
			}
			
			html += '<div class="details">';
				if(highlight) html += `<span class="highlight">${highlight}</span>`;
				
				html += `<h3>${title}</h3>`;
				
				if(tags) {
					html += `<div class="tags">`;
					html += tags.split(",").reduce((i, tag) => {
						return `<boom-item class="tag">${tag}</boom-item>`;
					}, "");
				}
				
			return html + "</div>";
		})();
	}
}


/*export default class BoomArticle extends HTMLElement {
	connectedCallback() {
		this.innerHTML = ((html = "", attr = name => this.getAttribute(name)) => {
			html += "<div>";
			if(attr("banner") != "undefined") {
				html += `
				<div class="banner">
					<img src="${attr("banner")}" 
						alt="${attr("title")}"
						${attr("loading") ? 'loading="' + attr("loading") + '"' : ''}
					>
				</div>`;
=======
		const { banner, loading, title, highlight, description, tags } = this.attributes;
		if(banner) {
			html += `<div class="banner">
				<img src="${banner.value}" loading="${loading.value || 'auto'}"
					alt="${title.value}" title="${title.value}">
			</div>`;
		}
		html += `<div class="details">`;
			if(title) html += `<h3>${title.value}</h3>`;
			if(description) html += `<p>${description.value}</p>`;
			if(tags) {
				html += `<div class="tags">`;
				html += tags.value.split(",").reduce((html, tag) => {
					return html + `<boom-item
						title="${tag}" class="tag"
					></boom-item>`;
				}, "");
				html += `</div>`;
>>>>>>> views
			}
		this.innerHTML = html + "</div></div>";
	}
<<<<<<< HEAD
}

function fillTags(tags, html = "") {
	if(tags != "undefined") {
		html += `<div class="tags">`;
			html += tags.split(",").reduce((html, item) => {
				return html + `<boom-item class="tag" 
					title="${item}"></boom-item>`;
			}, "");
			html += `</div>`;
	}
	
	return html;
}*/
=======
}
>>>>>>> views
